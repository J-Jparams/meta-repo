// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String    @id
  createdAt     DateTime
  updatedAt     DateTime

  name          String
  email         String @unique
  emailVerified Boolean
  image         String?

  sessions      Session[]
  accounts      Account[]
  profile       Profile?
  prFlagsCreated PRFlag[] @relation("UserCreatedPRFlags")
  mentoredPRs    PRSubmission[] @relation("MentorOnPRSubmission")
  actedAuditLogs PRAuditLog[]   @relation("UserActorOnPRAuditLog")
  avatars        Avatar[]       @relation("UserAvatars")
  issuedCodes    ActivationCode[] @relation("IssuedCodes")
  usedCodes      ActivationCode[] @relation("UsedCodes")


  @@map("users")
}

enum ActivationCodeType {
  ADMIN
  TEAM
}

model ActivationCode {
  id              String   @id @default(cuid())
  code            String   @unique
  type            ActivationCodeType
  issuedByUserId  String?
  usedByUserId    String?
  usedAt          DateTime?
  expiresAt       DateTime?
  createdAt       DateTime @default(now())

  // Relations
  issuedByUser    User?        @relation("IssuedCodes", fields: [issuedByUserId], references: [id], onDelete: SetNull)
  usedByUser      User?        @relation("UsedCodes", fields: [usedByUserId], references: [id], onDelete: SetNull)

  @@index([type],          name: "idx_activation_code_type")
}

model JoinRequest {
  id        String   @id @default(cuid())
  email     String
  note      String?
  createdAt DateTime @default(now())

   @@index([email], name: "idx_join_request_email")
}

model Session {
  id        String   @id
  createdAt DateTime
  updatedAt DateTime

  expiresAt DateTime
  token     String  @unique
  ipAddress String?
  userAgent String?

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@map("sessions ")
}

model Account {
  id                    String    @id
  createdAt             DateTime
  updatedAt             DateTime

  accountId             String
  providerId            String

  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@map("accounts")
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  name        String?
  bio         String?
  avatarUrl   String? 
  linkedinUrl String?
  githubUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum PRStatus {
  AWAITING_CONSENSUS
  INCUBATING
  PENDING_REFINEMENT
  IN_PROGRESS
  INTEGRATION_APPROVED
  CLOSED
  DECOMMISSIONED
} 

model Verification {
  id         String    @id
  createdAt  DateTime?
  updatedAt  DateTime?

  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}

model PRSubmission {
  id        String   @id @default(cuid())
  url       String
  title     String?
  author    String?
  submitter String?
  status    PRStatus @default(AWAITING_CONSENSUS)
  mentorId  String?
  claimedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  mentor     User?         @relation("MentorOnPRSubmission", fields: [mentorId], references: [id], onDelete: SetNull)
  flags      PRFlag[]
  audits     PRAuditLog[]

  @@index([status], name: "idx_pr_status")
}

model PRFlag {
  id              String   @id @default(cuid())
  prId            String
  createdByUserId String
  reason          String
  createdAt       DateTime @default(now())

  pr         PRSubmission @relation(fields: [prId], references: [id], onDelete: Cascade)
  createdBy  User         @relation("UserCreatedPRFlags", fields: [createdByUserId], references: [id], onDelete: Cascade)

  @@index([prId],            name: "idx_prflag_pr")
  @@index([createdByUserId], name: "idx_prflag_user")
}

model Avatar {
  id              String   @id @default(cuid())
  name            String
  taken           Boolean  @default(false)
  takenByUserId   String?
  takenAt         DateTime?
  user            User?        @relation("UserAvatars", fields: [takenByUserId], references: [id], onDelete: SetNull)

  @@unique([id, name], map: "uniq_org_avatar_name")
  @@index([takenByUserId], name: "idx_avatar_taken_by")
  // optional: one avatar per user
  // @@unique([takenByUserId], map: "uniq_avatar_taken_by_user")
  // @@unique([takenByUserId], map: "uniq_avatar_taken_by_user")
}

model PRAuditLog {
  id          String     @id @default(cuid())
  prId        String
  actorUserId String?
  action      String     // CREATE | CLAIM | FLAG | STATUS_CHANGE | ASSIGN | CANCEL
  fromStatus  PRStatus?
  toStatus    PRStatus?
  data        Json?
  createdAt   DateTime   @default(now())

  pr      PRSubmission  @relation(fields: [prId], references: [id], onDelete: Cascade)
  actor   User?         @relation("UserActorOnPRAuditLog", fields: [actorUserId], references: [id], onDelete: SetNull)

  @@index([prId],        name: "idx_praudit_pr")
  @@index([actorUserId], name: "idx_praudit_actor")
}
